---
# 1. Feature Flag CRD (Optional if using flagd config only)
apiVersion: core.openfeature.dev/v1beta1
kind: FeatureFlag
metadata:
  name: ui-flags
  namespace: default
spec:
  flagSpec:
    flags:
      welcome-message:
        defaultVariant: "default"
        state: ENABLED
        variants:
          default:
            value: "ðŸ‘‹ Welcome to the default message!"
          alt:
            value: "ðŸš€ This is an alternate welcome message!"

---
# 2. ConfigMap with HTML content
apiVersion: v1
kind: ConfigMap
metadata:
  name: html-content
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Feature Flag Demo</title>
    </head>
    <body>
      <h1 id="message">Loading message...</h1>
      <script>
        fetch('http://localhost:8014/evaluate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ flagKey: 'welcome-message', context: {} })
        })
        .then(res => res.json())
        .then(data => {
          document.getElementById('message').innerText = data.value || 'Fallback message';
        })
        .catch(() => {
          document.getElementById('message').innerText = 'Error loading flag.';
        });
      </script>
    </body>
    </html>

---
# 3. ConfigMap for flagd flag config
apiVersion: v1
kind: ConfigMap
metadata:
  name: open-feature-flagd-config
  namespace: default
data:
  flag-config.json: |
    {
      "flags": {
        "welcome-message": {
          "variants": {
            "default": { "value": "ðŸ‘‹ Welcome to the default message!" },
            "alt": { "value": "ðŸš€ This is an alternate welcome message!" }
          },
          "defaultVariant": "default",
          "state": "ENABLED"
        }
      }
    }

---
# 4. Deployment with nginx, flagd, and flagd-relay
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flag-demo
  labels:
    app: flag-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flag-demo
  template:
    metadata:
      labels:
        app: flag-demo
    spec:
      containers:
        - name: nginx
          image: nginx:1.25
          ports:
            - containerPort: 80
          volumeMounts:
            - name: html
              mountPath: /usr/share/nginx/html/index.html
              subPath: index.html

        - name: flagd
          image: ghcr.io/open-feature/flagd:latest
          args: ["start", "--uri", "file:/flags/flag-config.json"]
          ports:
            - containerPort: 8013
          volumeMounts:
            - name: flags
              mountPath: /flags

        - name: flagd-relay
          image: ghcr.io/open-feature/flagd-relay:latest
          env:
            - name: FLAGD_HOST
              value: "localhost"
            - name: FLAGD_PORT
              value: "8013"
          ports:
            - containerPort: 8014

      volumes:
        - name: html
          configMap:
            name: html-content
        - name: flags
          configMap:
            name: open-feature-flagd-config

---
# 5. LoadBalancer service to expose NGINX (port 80)
apiVersion: v1
kind: Service
metadata:
  name: flag-demo-service
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: flag-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
